---
title: "Machine Learning - Learning Lab 1"
subtitle: "Code-along - Foundations"
format:
  revealjs: 
    slide-number: c/t
    progress: true
    chalkboard: 
      buttons: false
    preview-links: auto
    logo: img/LASERLogoB.png
    theme: [default, css/laser.scss]
    width: 1920
    height: 1080
    margin: 0.05
    footer: <a href=https://www.go.ncsu.edu/laser-institute>go.ncsu.edu/laser-institute
---

```{r}
#| include: false
```

```{r}
#| echo: false
# then load all the relevant packages
pacman::p_load(pacman, knitr, tidyverse, readxl)
```

# Code-along - SML

::: {.panel-tabset}

## 0

**Loading, setting up: create a .R file in /lab-1 and run this code**

```{r}
#| eval: false
#| echo: true
library(tidyverse)
library(tidymodels)

starwars_recoded <- starwars %>% # built-in data available just by typing
    mutate(species_human = ifelse(species == "Human", "Human", "Not human")) # recoding species to create a categorical variable

starwars_recoded %>% 
    count(species) # how many humans are there?
```

## 1

```{r}
#| eval: false
#| echo: true

m1 <- lm(species_human ~ height + mass, data = starwars)
```

## 2

```{r}
#| eval: false
#| echo: true

summary(m1)
```

:::

# Code-along - SML

::: {.panel-tabset}

## 0

**Loading, setting up: create a .R file in /lab-1 and run this code**

```{r}
#| eval: false
#| echo: true
library(tidyverse)
library(tidymodels)

starwars_recoded <- starwars %>% # built-in data available just by typing
    mutate(species_human = ifelse(species == "Human", "Human", "Not human")) # recoding species to create a categorical variable

starwars_recoded %>% 
    count(species) # how many humans are there?
```

## 1

**Split data**

```{r}
#| echo: true
#| eval: false
train_test_split <- initial_split(starwars_recoded, prop = .80)
data_train <- training(train_test_split)
data_test <- testing(train_test_split)
```

## 2

**Engineer features**

```{r}
#| echo: true
#| eval: false
# predicting humans based on the independent effects of height and mass
my_rec <- recipe(species_human ~ height + mass, data = data_train)
```

## 3

**Specify recipe, model, and workflow**

```{r}
#| echo: true
#| eval: false
# specify model
my_mod <- logistic_reg() %>%
    set_engine("glm") %>%
    set_mode("classification")

# specify workflow
my_wf <- workflow() %>%
   add_model(my_mod) %>% 
    add_recipe(my_rec)
```

## 4

**Fit model**

```{r}
#| echo: true
#| eval: false
fitted_model <- fit(my_wf, data = data_train)
final_fit <- last_fit(fitted_model, train_test_split)
```

## 5

**Evaluate accuracy**

```{r}
#| echo: true
#| eval: false
final_fit %>%
   collect_metrics()
```

:::